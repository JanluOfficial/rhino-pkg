#!/bin/bash

tabs -4

export TEXTDOMAIN=rhino-pkg
if [[ -n $RHINOPKG_DEBUG ]]; then
    export TEXTDOMAINDIR="${PWD}/locale"
else
    export TEXTDOMAINDIR=/usr/share/locale
fi

help_flag="$(basename "$0") 0.0.1
    A package manager wrapper for Pacstall, apt, flatpak and snap
    Developed by Henryws <hwengerstickel@protonmail.com> for the Rhino Linux distribution

USAGE: rhino-pkg {flags} [input]

input: Provide package name or description

flags: 
    --help/-h: Display this page
    --exact/-e: Displays only packages with [input] in their name"

export NC='\033[0m'
export BGreen='\033[1;32m'
export BCyan='\033[1;36m'
export BYellow='\033[1;33m'
export BPurple='\033[1;35m'
export BRed='\033[1;31m'
export BWhite='\033[1;37m'

function msg() {
    local input="$*"
    echo -e "$input"
}

function prompt() {
    local input="$1"
    local index="$2"
    echo -ne "$input [0-$index]: ${BWhite}"
}

function clearscr() {
    tput cuu 1 && tput el
}

function search_pacstall() {
    if ! pacstall -S "$*" > /dev/null 2>&1; then
        return 1
    else
        # remove color codes
        local contents=("$(pacstall -S "$*" | sed 's/\x1B\[[0-9;]\{1,\}[A-Za-z]//g' | awk '{print $1}')")
    fi
    echo "${contents[@]}"
}

function search_apt() {
    if [[ -z $DESCRIPTION ]]; then
        local contents=("$(apt-cache search --names-only "$*" | awk '{print $1}')")
    else
        local contents=("$(apt-cache search "$*" | awk '{print $1}')")
    fi
    if [[ -n $contents ]]; then
        echo "${contents[@]}"
    else
        return 1
    fi
}

function search_flatpak() {
    if [[ -z $DESCRIPTION ]]; then
        local contents=("$(LC_ALL=C flatpak search --columns="application" "$*" | head -n +2 | grep -o "$*")")
    else
        local contents=("$(LC_ALL=C flatpak search --columns="application" "$*" | head -n +2)")
    fi
    if [[ ${contents[*]} == "No matches found" ]]; then
        return 1
    else
        echo "${contents[@]}"
    fi
}

function search_snap() {
    if [[ -z $DESCRIPTION ]]; then
        local contents=("$(snap find "$*" | awk '{ print $1 }' | tail -n +2 | grep -o "$*")")
    else
        local contents=("$(snap find "$*" | awk '{ print $1 }' | tail -n +2)")
    fi
    if [[ ${contents[*]} == "No matching snaps for"* ]]; then
        return 1
    else
        echo "${contents[@]}"
    fi
}

if [[ -z $* ]]; then
    msg $"No input given!"
    exit 1
elif [[ $1 == "-h" ]] || [[ $1 == "--help" ]]; then
    echo "$help_flag"
    exit
fi

if [[ $1 == "search" ]]; then
    SEARCH=true
    shift
fi

if [[ $1 == "-d" || $1 == "--description" ]]; then
    DESCRIPTION=true
    shift
fi

if command -v pacstall &> /dev/null; then
    msg $"Searching Pacstall…"
    pacstall_search_list=($(search_pacstall $*))
    clearscr
fi
msg $"Searching apt…"
apt_search_list=($(search_apt $*))
clearscr
if command -v flatpak &> /dev/null; then
    msg $"Searching flatpak…"
    flatpak_search_list=($(search_flatpak $*))
    clearscr
fi
if command -v snap &> /dev/null; then
    msg $"Searching snap…"
    snap_search_list=($(search_snap $*))
    clearscr
fi

if [[ ${#pacstall_search_list} -eq 0 && ${#apt_search_list} -eq 0 && ${#flatpak_search_list} -eq 0 && ${#snap_search_list} -eq 0 ]]; then
    msg $"No packages found matching '$*'!"
    exit 1
fi

msg $"Found packages matching '${BPurple}$*${NC}':"
echo

count=0
pkgs=()
pkgrepo=()

for i in "${flatpak_search_list[@]}"; do
    echo -e "[${BCyan}$count${NC}]: $i (${BCyan}flatpak${NC})"
    pkgs+=("$i")
    pkgrepo+=("flatpak")
    ((count++))
done
for i in "${apt_search_list[@]}"; do
    echo -e "[${BGreen}$count${NC}]: $i (${BGreen}apt${NC})"
    pkgs+=("$i")
    pkgrepo+=("apt")
    ((count++))
done
for i in "${pacstall_search_list[@]}"; do
    echo -e "[${BYellow}$count${NC}]: $i (${BYellow}pacstall${NC})"
    pkgs+=("$i")
    pkgrepo+=("pacstall")
    ((count++))
done
for i in "${snap_search_list[@]}"; do
    echo -e "[${BRed}$count${NC}]: $i (${BRed}snap${NC})"
    pkgs+=("$i")
    pkgrepo+=("snap")
    ((count++))
done

((count--))

if [[ -n $SEARCH ]]; then
    exit 0
fi

echo

prompt $"Select which package to install" "$count"
read -r entered_input
echo -ne "${NC}"
if [[ ! $entered_input =~ ^[0-9]+$ ]] || [[ $entered_input -gt $count ]] || [[ ${entered_input:0:1} == "-" ]]; then
    msg $"'$entered_input' is not a valid number"
    exit 1
fi

msg $"Selecting '${BPurple}${pkgs[$entered_input]}${NC}' from package manager '${BPurple}${pkgrepo[$entered_input]}${NC}'"

case "${pkgrepo[$entered_input]}" in
    flatpak)
        flatpak install "${pkgs[$entered_input]}" -y
        ret=$?
        ;;
    apt)
        if command -v nala &> /dev/null; then
            sudo nala install "${pkgs[$entered_input]}" -y
            ret=$?
        else
            sudo apt install "${pkgs[$entered_input]}" -y
            ret=$?
        fi
        ;;
    pacstall)
        pacstall -I "${pkgs[$entered_input]}"
        ret=$?
        ;;
    snap)
        sudo snap install "${pkgs[$entered_input]}"
        ret=$?
        ;;
    *)
        msg $"Invalid repository name!"
        exit 1
        ;;
esac

exit "$ret"
